#!/bin/bash

echo "Rollout Swift wrapper: `date`"

rollout_dir=$(cd "`dirname "$0"`"/../..; pwd)
lib_version=$(. "$rollout_dir"/lib/versions; echo $lib)

debug_replace_in_place=""
# debug_replace_in_place="create_in_place"
# debug_replace_in_place="no_oyster"
# debug_replace_in_place="restore"

originalParams=("$@")
swift_path=`/usr/bin/xcrun -f swiftc`

unset measurements_list #{{{
measurements_locals() {
  local start=RolloutSwiftWrapperMeasurements__$1__start
  local finish=RolloutSwiftWrapperMeasurements__$1__finish
  local duration=RolloutSwiftWrapperMeasurements__$1__duration
  echo "start=$start finish=$finish duration=$duration"
}

begin_measurement() {
  local `measurements_locals $1`
  [ -z "${!start}" ] || echo "warning: overriding start measurement for $1"
  local value=`ruby -e 'puts Time.now.to_f'`
  eval $start=$value
  measurements_list[${#measurements_list[*]}]=$1
}

end_measurement() {
  local `measurements_locals $1`
  [ -z "${!finish}" ] || echo "warning: overriding finish measurement for $1"
  local value=`ruby -e 'puts Time.now.to_f'`
  eval $finish=$value
  eval $duration=$(echo ${!finish} - ${!start} | bc)
} #}}}

finalize_measurements() {
    end_measurement ALL
    echo "Rollout Measurements results:"
    for measurement_title in ${measurements_list[*]}; do
      prefix=RolloutSwiftWrapperMeasurements__${measurement_title}__
      duration="${prefix}duration"
      [ -n "${!duration}" ] || continue
      start=${prefix}start
      finish=${prefix}finish
      echo "    ${measurement_title}: ${!duration}  (${!start} - ${!finish})"
    done
}
begin_measurement ALL

if [ "$debug_replace_in_place" == "no_oyster" ]; then
    begin_measurement swift_with_no_oyster
    "$swift_path" "${originalParams[@]}"
    end_measurement swift_with_no_oyster
    finalize_measurements
    exit $?
fi

unset arch output_file_map module_name
extract_args() {
    while [[ $# -gt 0 ]]
    do
    key="$1"

    case $key in
        -target)
            arch="$2"
            shift # past argument
            ;;
        -output-file-map)
            output_file_map="$2"
            shift #past argument
            ;;
        -module-name)
            module_name="$2"
            shift #past argument
            ;;
        -emit-module-path)
            emit_module_path="$2"
            shift
            ;;
        *)
            # unknown option
            ;;
    esac
    shift # past argument or value
    done
}
extract_args "$@"

is_debug=`basename "$0"`
exec 3>/dev/null 4>&3
debug_mode=""
if [ "$is_debug" == "swiftc_debug" ]; then
    echo "running swiftc in debug"
    set -x
    exec 3>&1 4>&2
    debug_mode="-d"
    export ROLLOUT_REPLACEMENTS_LOG=/tmp/rollout_var/open_replacements.log
fi

log_debug() {
    echo "$1" >&3
}

log_always() {
    echo "$1"
}

BUILD_SETTINGS_FILE=/tmp/rollout_var/build_data/$module_name.$arch
log_debug "Using build settings file: $BUILD_SETTINGS_FILE"
export ROLLOUT_KEY=`cat $BUILD_SETTINGS_FILE | grep "^rollout_key=" | cut -d= -f2`

export ROLLOUT_SWIFT_VERSION=`xcrun swift --version | grep version | sed -E 's/^.* version ([^ ]+).*/\1/'`

swift_injections_dir=/tmp/rollout_var/swift_injections
mkdir -p "$swift_injections_dir"
VAR_DIR=`mktemp -d $swift_injections_dir/"$arch".XXXXX`

error_file="$VAR_DIR"/swiftc_error
error_handler() {
    local last_status=$1
    local category=$2
    log_debug "exec original swiftc"
    unset ROLLOUT_REPLACEMENTS
    unset DYLD_FORCE_FLAT_NAMESPACE
    unset DYLD_INSERT_LIBRARIES

    log_always "ROLLOUT ERROR: $category"
    [ $category == "Oyster" ] && {
        log_dir=/tmp/rollout_var
        log_file=$log_dir/upload_oyster_crash_report.log
        session_id=$RANDOM
        log_always "Rollout: Will send oyster crash report now if any (in background), the output will be saved to $log_file , session id is $session_id"
        mkdir -p $log_dir
        (
            log_always "`date +"%Y-%m-%d_%H:%M:%S"`: session $session_id started (rollout key $ROLLOUT_KEY)"
            "$DIR/../../lib/Oyster/MacOS/Oyster" -r
            log_always "`date +"%Y-%m-%d_%H:%M:%S"`: session $session_id finished (rollout key $ROLLOUT_KEY)"
        ) >> $log_file 2>&1 &
    }

    session_id=$RANDOM
    error_build_copy=$swift_injections_dir/error.$arch
    error_session_copy=$swift_injections_dir/error.$session_id
    log_always "going to send error file to Rollout.io . Session id: $session_id. Also copying the error file to \"$error_build_copy\""
    cp $error_file $error_build_copy
    cp $error_file $error_session_copy
    (
        { set +x; } > /dev/null 2>&1
        echo "`date +"%Y-%m-%d_%H:%M:%S"`: session $session_id started."
        server="$ROLLOUT_allServicesInOneServer"
        [ -n "$ROLLOUT_allServicesInOneServer" ] || server="https://error.rollout.io"
        url="$server/build/error/$category"
        echo "`date +"%Y-%m-%d_%H:%M:%S"`: sending \"$error_session_copy\" file to url \"$url\"."
        gzip -c "$error_session_copy" | curl -sS --location --post301 --post302 -F rollout_key=$ROLLOUT_KEY -F lib_version="$lib_version" -F data=@"-" "$url"
        echo "`date +"%Y-%m-%d_%H:%M:%S"`: removing error file \"$error_session_copy\".."
        rm $error_session_copy
        echo "`date +"%Y-%m-%d_%H:%M:%S"`: session $session_id finished."
        echo
    ) >> $swift_injections_dir/error_reporting.log 2>&1 &
   
    clean 
    finalize_measurements
    exit $last_status
}

clean() {
    debug_path=/tmp/rollout_swiftc_generated_files_debug_location
    [ -d $debug_path ] && {
      rm -rf $debug_path/"$arch"
      mv "$VAR_DIR" $debug_path/"$arch"
    } || {
      rm -rf "$VAR_DIR"
    }
}

get_obj_file() {
    local last_component=`basename "$1"`
    local filename="${last_component%.*}"
    local obj_file=`grep -o "${last_component}.*object.*:.*${filename}.o\"" "$output_file_map" | grep -o 'object.*' | grep -o ":.*" | grep -o "\/.*o"`
    echo "$obj_file" | sed "s@\\\\@@g"
}

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
strip_all=()
strip_rollout=()
rollout_replacements_file="$VAR_DIR"/replacements
rollout_sources_file="$VAR_DIR"/sources
touch "$rollout_sources_file"

for i in "$@"
do
    [ -f "$i" ] || continue;

    [[ $i =~ RolloutGenerated\.swift$ ]] && {
        last_component=`basename "$i"`
        Rollout_Generated="$VAR_DIR"/"$last_component"
        cp "$i" "$Rollout_Generated" 2>$error_file ||  error_handler $? "CopyFiles"
        echo "$i" >> "$rollout_replacements_file"
        echo "$Rollout_Generated" >> "$rollout_replacements_file"
        strip_all+=("`get_obj_file "$i"`")
        continue
    } 

    [[ $i =~ (RolloutSwiftInjectionBridge|RolloutMayPatchFilter)\.swift$ ]] && {
        strip_all+=("`get_obj_file "$i"`")
        continue
    }

    [[ $i =~ \.swift$ ]] && {
        last_component=`basename "$i"`
        TEMP_FILE="$VAR_DIR"/"$last_component"
        cp "$i" "$TEMP_FILE" 2>$error_file ||  error_handler $? "CopyFiles"
        echo "$TEMP_FILE" >> "$rollout_sources_file"
        echo "$i" >> "$rollout_replacements_file"
        echo "$TEMP_FILE" >> "$rollout_replacements_file"
        strip_rollout+=("`get_obj_file "$i"`")
    }
done

if [ "$debug_replace_in_place" == create_in_place ] ; then
    cat "$rollout_replacements_file" | {
        while true; do
            read real || break
            read repl || break
            orig="$real.orig"
            if [ -f "$orig" ]; then
                cp -f "$orig" "$repl"
            else
                cp "$real" "$orig"
            fi
        done
    }
elif [ "$debug_replace_in_place" == restore ] ; then
    cat "$rollout_replacements_file" | {
        while true; do
            read real || break
            read repl || break
            orig="$real.orig"
            if [ -f "$orig" ]; then
                mv -f "$orig" "$real"
                cp -f "$real" "$repl"
            fi
        done
    }
fi

rollout_structure_file="`dirname "$emit_module_path"`/$module_name.rollout_structure"
begin_measurement oyster
"$DIR/../../lib/Oyster/MacOS/Oyster" --rolloutGeneratedPath "$Rollout_Generated" --rolloutSourcesFilePath "$rollout_sources_file" \
                                     --moduleName "$module_name" --rolloutStructureFile "$rollout_structure_file" $debug_mode >&3 2>$error_file; oyster_exit_code=$?
end_measurement oyster

[ $oyster_exit_code -eq 0 ] || {
    error_handler $oyster_exit_code "Oyster"
}

if [ "$debug_replace_in_place" == "create_in_place" ] ; then
    cat "$rollout_replacements_file" | {
        while true; do
            read real || break
            read repl || break
            orig="$real.orig"
            cp -f "$repl" "$real"
        done
    }
fi

export ROLLOUT_REPLACEMENTS="$rollout_replacements_file"
export DYLD_FORCE_FLAT_NAMESPACE=1
[ "$debug_replace_in_place" == "create_in_place" ] || export DYLD_INSERT_LIBRARIES="$DIR/../../lib/libRolloutOverrides.dylib"

begin_measurement swift_compile
"$swift_path" "$@"; compile_error=$?
end_measurement swift_compile

if [ $compile_error == 0 ]; then
    for i in "${strip_all[@]}"; do
        xcrun strip -x "$i" 2>$error_file 1>&2 || error_handler $? "StripAll"
    done

    touch "$rollout_structure_file"
fi

clean
finalize_measurements

exit $compile_error