#!/bin/bash

export PATH=/usr/bin:/bin:"$PATH"

LIB_DIR=$(dirname "$0")
ROLLOUT_DIR=$(dirname "$LIB_DIR")
VAR_DIR=/tmp/rollout_var

ERROR_wrongArguments=("exit=1" "message=Got an incorrect command line argument" "xcode_alert=error")
ERROR_appKeyMissing=("exit=2" "message=app_key argument is required" "xcode_alert=error")
ERROR_wrongSelfVersion=("exit=3" "message=Incorrect SDK version" "xcode_alert=error")
ERROR_missingDsym=("exit=14" "message=Missing dSYM. Please contact us at support@rollout.io" "xcode_alert=error")
ERROR_missingExecutable=("exit=15" "message=Missing executable. Please contact us at support@rollout.io" "xcode_alert=error")
ERROR_dsym2protoFailed=("exit=17" "message=dsym2proto failed. Please contact us at support@rollout.io" "xcode_alert=error")
ERROR_missingProto=("exit=19" "message=The proto data file is missing. Please contact us at support@rollout.io" "xcode_alert=error")
ERROR_dsym2protoNotFound=("exit=20" "message=dsym2proto not found. Please contact us at support@rollout.io" "xcode_alert=error")

handle_error() { #{{{
  eval local error=('"${'$1'[@]}"')
  local details="$2"
  local exit=""
  local message=""
  local xcode_alert=""
  local no_report=""
  for param in "${error[@]}"; do eval ${param%=*}=\"${param#*=}\"; done

  [ -z "$details" ] || message="$message: $details"

  [ -z "$xcode_alert" ] || echo "$xcode_alert: $message" 1>&2
  [ -n "$no_report" ] || echo "tweaker error:" "$message" 1>&2
  [ -z "$exit" ] || exit $exit
} #}}}

dsym_file_from_path() { #{{{
  echo "$1"/Contents/Resources/DWARF/*
} #}}}

get_overridable_rollout_tool() {
  local tool=$1
  local override_name=ROLLOUT_overridableTool_$tool
  local override_tool=${!override_name}
  [ -n "$override_tool" ] && echo $override_tool || echo "$LIB_DIR"/$tool
}

get_UUID() {
  xcrun dwarfdump -u $1 | awk '{print$2}'
}

unset app_key help exit disable_upload
while getopts "k:hm" option; do #{{{
  case $option in
    k)
      app_key=$OPTARG
      ;;
    m)
      disable_upload=1
      ;;
    h)
      help=1
      ;;
    *)
      exit=1
      ;;
  esac
done #}}}

[ -z "$help" ] || { #{{{
  cat << EOF
Usage:
$0 <options>

  -k <app key>           Rollout app key (required)
  -m                     disable uploading of dsym to Rollout server
  -h                     this help message
EOF
  exit
} #}}}

[ -z "$exit" ] || handle_error ERROR_wrongArguments

[ -n "$app_key" ] || handle_error ERROR_appKeyMissing

rollout_build=`(. "$LIB_DIR"/versions; echo $build)`
echo "Rollout.io upload_dsym_phase (Rollout SDK build $build)"

xcodeproj_configuration=`(. "$LIB_DIR"/versions; echo $xcodeproj_configuration)`
[ 0$ROLLOUT_lastXcodeprojConfiguration -ge $xcodeproj_configuration ] || {
  cat << end_of_error_msg
Rollout.io SDK version was not reconfigured, aborting...
Our guess is that you changed Rollout.io version in your podfile, but have not reconfigured it yet.
If this is correct, please run the following command:
    "$ROLLOUT_DIR"/install/configure_pod.sh -k $app_key

If our guess is incorrect or if the above didn't help, please contact us at support@rollout.io
end_of_error_msg
  handle_error ERROR_wrongSelfVersion
} #' (sublime goes crazy on unpaired single quote...)

mkdir -p "$VAR_DIR"
temp_dir=`mktemp -d $VAR_DIR/temp.XXX`

target="$CODESIGNING_FOLDER_PATH/$EXECUTABLE_NAME"
dsym_file=`dsym_file_from_path "$DWARF_DSYM_FOLDER_PATH/$DWARF_DSYM_FILE_NAME"`
if [ -f "$dsym_file" ] && [ `stat -f "%m" "$dsym_file"` -ge `stat -f "%m" "$target"` ]; then
  echo "Rollout: using dsym generated by Xcode: \"$dsym_file\""
else
  echo "Rollout: will generate dsyms"
  dsym_path="$temp_dir"/dsym.dSYM
  xcrun dsymutil "$target" -o "$dsym_path" > /dev/null 2>&1
  dsym_file=`dsym_file_from_path "$dsym_path"`
fi

[ -f "$dsym_file" ] || handle_error ERROR_missingDsym

[ `(. "$LIB_DIR"/versions; echo $lib | cut -d- -f1)` != SwiftBeta -a "$CONFIGURATION" != "Debug-SwiftMilestone" -a "$CONFIGURATION" != "Release-SwiftMilestone" ] || {
  echo "In Swift-beta part"
  executable_file=${SYMROOT}/${CONFIGURATION}-${PLATFORM_NAME}/${PRODUCT_NAME}.app/${PRODUCT_NAME}
  debug_info_file_name=rollout_swift_debug_info
  dsym2proto="`get_overridable_rollout_tool dsym2proto`"
  [ -x "$dsym2proto" ] || handle_error ERROR_dsym2protoNotFound

  "$dsym2proto" --include-names --input-dsym "$dsym_file" --input-binary "$executable_file" --create-protobin --supported-swift-only --output-prefix $temp_dir/$debug_info_file_name || handle_error ERROR_dsym2protoFailed
	mv $temp_dir/$debug_info_file_name.bin $temp_dir/$debug_info_file_name

  cp -v $temp_dir/$debug_info_file_name  "${CONFIGURATION_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/"
  if [ -d "${INSTALL_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}" ]; then
    echo "Rollout: Installation mode, special copy"
    cp -v $temp_dir/$debug_info_file_name  "${INSTALL_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}"
  fi
}

if [ -z "$disable_upload" ]; then
  dsym_session_id=$RANDOM
  named_dsym="$VAR_DIR"/dsym__"$app_key"__`date +"%Y-%m-%d_%H:%M:%S"`__$dsym_session_id.dsym
  cp "$dsym_file" "$named_dsym"
  echo "Going to upload the dsym in the background. Session id: $dsym_session_id, dsym path: \"$named_dsym\""
  (
    echo "`date +"%Y-%m-%d_%H:%M:%S"`: session $dsym_session_id started (-k $app_key -d \"$named_dsym\")"
    "$LIB_DIR"/upload_dsym -k $app_key -d "$named_dsym"
    rm "$named_dsym"
    echo "`date +"%Y-%m-%d_%H:%M:%S"`: session $dsym_session_id finished"
  ) >> "$VAR_DIR"/upload_dsym.log 2>&1 &
else
  echo "Dsym uploading disabled"
fi

rm -rf $temp_dir
