#!/bin/bash

export PATH=/usr/bin:/bin:"$PATH"

LIB_DIR=$(dirname "$0")
ROLLOUT_DIR=$(dirname "$LIB_DIR")
VAR_DIR=/tmp/rollout_var

ERROR_wrongArguments=("exit=1" "message=Got an incorrect command line argument" "xcode_alert=error")
ERROR_appKeyMissing=("exit=2" "message=app_key argument is required" "xcode_alert=error")
ERROR_wrongSelfVersion=("exit=3" "message=Incorrect SDK version" "xcode_alert=error")
ERROR_couldNotSeparateDsymBundle=("exit=12" "message=Missing dSYM. Please contact us at support@rollout.io" "xcode_alert=error")
handle_error() { #{{{
  eval local error=('"${'$1'[@]}"')
  local details="$2"
  local exit=""
  local message=""
  local xcode_alert=""
  local no_report=""
  for param in "${error[@]}"; do eval ${param%=*}=\"${param#*=}\"; done

  [ -z "$details" ] || message="$message: $details"

  [ -z "$xcode_alert" ] || echo "$xcode_alert: $message" 1>&2
  [ -n "$no_report" ] || echo "tweaker error:" "$message" 1>&2
  [ -z "$exit" ] || exit $exit
} #}}}

dsym_file_from_path() { #{{{
  echo "$1"/Contents/Resources/DWARF/*
} #}}}

unset app_key help exit
while getopts "k:h" option; do #{{{
  case $option in
    k)
      app_key=$OPTARG
      ;;
    h)
      help=1
      ;;
    *)
      exit=1
      ;;
  esac
done #}}}

[ -z "$help" ] || { #{{{
  cat << EOF
Usage:
$0 <options>

  -k <app key>           Rollout app key (required)
  -h                     this help message
EOF
  exit
} #}}}

[ -z "$exit" ] || handle_error ERROR_wrongArguments

[ -n "$app_key" ] || handle_error ERROR_appKeyMissing

rollout_build=`(. "$LIB_DIR"/versions; echo $build)`
echo "Rollout.io upload_dsym_phase (Rollout SDK build $build)"

xcodeproj_configuration=`(. "$LIB_DIR"/versions; echo $xcodeproj_configuration)`
[ 0$ROLLOUT_lastXcodeprojConfiguration -ge $xcodeproj_configuration ] || {
  cat << end_of_error_msg
Rollout.io SDK version was not reconfigured, aborting...
Our guess is that you changed Rollout.io version in your podfile, but have not reconfigured it yet.
If this is correct, please run the following command:
    "$ROLLOUT_DIR"/install/configure_pod.sh -k $app_key

If our guess is incorrect or if the above didn't help, please contact us at support@rollout.io
end_of_error_msg
  handle_error ERROR_wrongSelfVersion
} #' (sublime goes crazy on unpaired single quote...)

mkdir -p "$VAR_DIR"

target="$CODESIGNING_FOLDER_PATH/$EXECUTABLE_NAME"
dsym_file=`dsym_file_from_path "$DWARF_DSYM_FOLDER_PATH/$DWARF_DSYM_FILE_NAME"`
if [ -f "$dsym_file" ] && [ `stat -f "%m" "$dsym_file"` -ge `stat -f "%m" "$target"` ]; then
  echo "Rollout: using dsym generated by Xcode: \"$dsym_file\""
else
  echo "Rollout: will generate dsyms"
  dsym_path="$VAR_DIR"/dsym.dSYM
  rm -rf "$dsym_path"
  xcrun dsymutil "$target" -o "$dsym_path" > /dev/null 2>&1
  dsym_file=`dsym_file_from_path "$dsym_path"`
fi

[ -f "$dsym_file" ] || handle_error ERROR_couldNotSeparateDsymBundle

dsym_session_id=$RANDOM
named_dsym="$VAR_DIR"/dsym__"$app_key"__`date +"%Y-%m-%d_%H:%M:%S"`__$dsym_session_id.dsym
cp "$dsym_file" "$named_dsym"
echo "Going to upload the dsym in the background. Session id: $dsym_session_id, dsym path: \"$named_dsym\""
(
  echo "`date +"%Y-%m-%d_%H:%M:%S"`: session $dsym_session_id started (-k $app_key -d \"$named_dsym\")"
  "$LIB_DIR"/upload_dsym -k $app_key -d "$named_dsym"
  rm "$named_dsym"
  echo "`date +"%Y-%m-%d_%H:%M:%S"`: session $dsym_session_id finished"
) >> "$VAR_DIR"/upload_dsym.log 2>&1 &